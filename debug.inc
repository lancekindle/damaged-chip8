; contains code for generating debug messages and breakpoints within the
; code itself. BGB (an emulator) displays these messages and stops at the
; specified breakpoints generated by these macros. However, that is not bgb's
; default behavior. You'll want to edit bgb.ini (in the same folder as
; bgb.exe) to set these options:

; DebugMsgFile=1    ; output debug messages in source to "debugmsg.txt"
;  -- Use bug_message "msg". Messages passed by this way are sent to
;   - debugmsg.txt, which you can monitor with "tail -f" in linux

; DebugSrcBrk=1     ; enable breakpoints embedded in source-code
;  -- Use bug_break "msg". Breakpoints stop execution when it is reached.
;   - The breakpoint message is also output to debugmsg.txt

;
; One Last Thing: Expressions can be evaluated within debug messages
; "%boolean expression%text if true;text if false"
; or a simple expression can just be used, such as:
; "health > max! It's at %A%" <- which'll then print (if A contains 15):
; "heatlh > max! It's at 0F"
; "%A==0F%;squares greater than allowed;squares good"
;  --
; list of expression variables that can be used:
; CPU registers: AF, BC, DE, HL, SP, PC, B, C, D, E, H, L, A
; CPU flags:	 ZERO, ZF, Z, CARRY, CY, IME, ALLREGS
; other state values: ROMBANK, XRAMBANK, SRAMBANK, WRAMBANK, VRAMBANK,
; 		      TOTALCLKS, LASTCLKS, CLKS2VBLANK
; --
; so as an example, if I wanted to output state of all registers within
; a debug message, I'd make this macro call:
; bug_message	"Registers AF,BC,DE,HL,SP @ %AF%, %BC%, %DE%, %HL%, %SP%"
; e.g. print: "Registers AF,BC,DE,HL,SP @ C100, 00FE, FF28, 8000, FFFF"

	IF !DEF(debug_inc)
debug_inc	set	1

; this is a macro that stores in memory a debug message. This message will
; be skipped by the actual hardware, but in BGB or No$GMB it will display
; in their "debug messages" window
; ( I have confirmed it works in BGB if you enable source-code messages.
;   In bgb.ini file, set
;   DebugMsgDisasm=1
;   then choose how you want message to get output (either or both):
;   DebugMsgFile=1	# to output to file 'debugmsg.txt'
;   DebugMsgWindow=1    # to output to bgb's debug window (only when shown)
; )
bug_message: MACRO
	IF	DEF(verbose)
	ld	d, d	; "magic bytes" indicating "debug" message here
	jr .end\@
	DW $6464
	DW $0000
	DB \1
.end\@
	ENDC
	ENDM

; call this macro to automatically break / halt execution when this instruction
; is reached. This macro uses the bug_message macro, so you must pass a
; message into this macro as well
; ( I have confirmed it works in BGB if you enable source-code breakpoints.
;   In bgb.ini file, set
;   DebugSrcBrk=1
; )
bug_break: MACRO
	bug_message	\1
	ld	b, b	; "magic bytes" indicating "break"
	jr .end\@
	DW $6464
	DW $0000
.end\@
	ENDM

	ENDC	; end definition of debug.asm
